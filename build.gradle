import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
        classpath(platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$kotlinCoroutinesVersion"))
        classpath(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "org.openjfx:javafx-plugin:0.0.8"
    }
}

allprojects {
    group = 'ee'
    version = eeVersion
}

subprojects {
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.3"
            languageVersion = "1.3"
        }
    }

    sourceSets {
        main {
            kotlin.srcDirs = ['src/main/kotlin', 'src-gen/main/kotlin']
        }
    }

    repositories {
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    publishing {
        repositories {
            mavenLocal()
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
            }
        }
    }

    dependencies {
        //implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
        implementation(platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$kotlinCoroutinesVersion"))
        implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
        //implementation(platform("org.springframework:spring-framework-bom:$springVersion"))

        //implementation(platform("io.ktor:ktor-bom:$versionKtor"))

        testCompile "org.hamcrest:hamcrest-library"
        testCompile "org.junit.jupiter:junit-jupiter-api"

        runtime "org.junit.jupiter:junit-jupiter-engine"
        runtime "org.junit.platform:junit-platform-launcher"

        runtime "ch.qos.logback:logback-classic"
    }

    task allDeps(type: DependencyReportTask) {}
}

project(':ee:tornadoFxBom') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {

        compile("no.tornado:tornadofx:$version_tornadofx") {
            exclude module: "kotlin-stdlib-jre8"
            exclude module: "kotlin-reflect"
            exclude module: "kotlin-stdlib-jdk7"
            exclude module: "kotlin-stdlib-jdk8"
        }
    }
}

project(':ee:ee-common_java') {
}

project(':ee:ee-common') {
    dependencies {
        compile project(':ee:ee-common_java')
        compile "org.slf4j:slf4j-api"
        compile "org.jetbrains.kotlin:kotlin-stdlib"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core"
    }
}

project(':ee:ee-asm') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee:ee-common')
        compile "org.ow2.asm:asm:${version_asm}"
        compile "org.ow2.asm:asm-tree:${version_asm}"
    }
}

/*
project(':ee:ee-axon_example') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-jersey')
        compile('org.springframework.boot:spring-boot-starter-web')
        runtime('org.hsqldb:hsqldb')
        compileOnly('org.projectlombok:lombok')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        compile("org.axonframework:axon-spring:${version_axon}")
        testCompile("org.axonframework:axon-test:${version_axon}")
    }
}
*/

project(':ee:ee-lang_item') {
    dependencies {
        compile project(':ee:ee-common')
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee:ee-design') {
    dependencies {
        compile project(':ee:ee-lang')
    }
}

project(':ee:ee-design_gen') {
    dependencies {
        compile project(':ee:ee-lang')
    }
}

project(':ee:ee-design_ui') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee:ee-design_ui_des') {
    dependencies {
        compile project(':ee:ee-design')
        compile project(':ee:ee-asm')
    }
}

project(':ee:ee-design_ui_des_asm') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee:ee-design')
        compile project(':ee:ee-asm')
    }
}

project(':ee:ee-design_swagger') {
    dependencies {
        compile project(':ee:ee-design')
        compile "io.swagger:swagger-parser:${version_swagger}"
    }
}

project(':ee:ee-design_json') {
    dependencies {
        compile project(':ee:ee-design')

        compile "com.worldturner.medeia:medeia-validator-jackson:${version_json_schema_medeia}"
        compile "com.github.everit-org.json-schema:org.everit.json.schema:1.12.1"
    }
}

project(':ee:ee-design_xsd') {
    dependencies {
        compile project(':ee:ee-design')
        compile "com.sun.xsom:xsom:${version_xsom}"
    }
}

project(':ee:ee-lang') {
    dependencies {
        compile project(':ee:ee-lang_item')
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
    }
}

project(':ee:ee-lang_gen') {
    dependencies {
        compile project(':ee:ee-lang_item')
    }
}

project(':ee:ee-task') {
    dependencies {
        compile project(':ee:ee-lang')
    }
}

project(':ee:ee-task_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee:ee-system_des') {
    dependencies {
        compile project(':ee:ee-task_des')
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee:ee-system') {
    dependencies {
        compile project(':ee:ee-task')
    }
}

project(':ee:ee-design_task') {
    dependencies {
        compile project(':ee:ee-design')
        compile project(':ee:ee-system')
    }
}

project(':ee:ee-lang_fx') {
    apply plugin: 'application'
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    mainClassName = 'ee.lang.fx.ModelApp'

    dependencies {
        compile project(':ee:ee-design_task')
        compile project(':ee:tornadoFxBom')
    }

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'ee.lang.fx.ModelApp'
            )
        }
        from configurations.compile.collect { entry -> zipTree(entry) }
    }
}

project(':ee-slides:ee-slides_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee-slides:ee-slides') {
    dependencies {
        compile project(':ee:ee-common')
    }
}

project(':ee-slides:ee-slides_json') {
    dependencies {
        compile project(':ee-slides:ee-slides')
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee-slides:ee-slides_fx') {
    apply plugin: 'application'
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    mainClassName = 'ee.slides.fx.SlidesApp'

    dependencies {
        compile project(':ee-slides:ee-slides_json')
        compile project(':ee:tornadoFxBom')
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'ee.slides.fx.SlidesApp'
            )
        }
        from configurations.compile.collect { entry -> zipTree(entry) }
    }
}

project(':ee-timeline:ee-timeline_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee-timeline:ee-timeline') {
    dependencies {
        compile project(':ee:ee-common')
    }
}

project(':ee-timeline:ee-timeline_json') {
    dependencies {
        compile project(':ee-timeline:ee-timeline')
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee-timeline:ee-timeline_excel') {
    dependencies {
        compile project(':ee-timeline:ee-timeline')
        compile project(':ee-timeline:ee-timeline_json')
        compile project(':ee-office:ee-excel')
    }
}

project(':ee-elastic:ee-elastic') {
    apply plugin: 'application'
    apply plugin: 'kotlin'

    mainClassName = "ee.es.ExportMainKt"

    dependencies {
        compile project(':ee:ee-common')
        compile "org.elasticsearch.client:transport:$version_elasticsearch"
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
            exclude module: "kotlin-stdlib-jdk7"
        }
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee-office:ee-excel') {
    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')

        compile "org.apache.poi:poi-ooxml:$version_ooxml"
    }
}

project(':ee-office:ee-msaccess') {
    dependencies {
        compile project(':ee:ee-common')
        compile "com.healthmarketscience.jackcess:jackcess:$version_jackcess"

        testCompile project(':ee:ee-design')
    }
}

project(':ee-office:ee-powerpoint') {
    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')
        compile project(':ee-slides:ee-slides_json')
        compile project(':ee-office:ee-translate')

        compile "org.apache.poi:poi-ooxml:$version_ooxml"
    }
}

project(':ee-office:ee-word') {
    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')

        compile "org.apache.poi:poi-ooxml:$version_ooxml"
        compile "org.apache.poi:poi-scratchpad:$version_poi_scratchpad"
    }
}

project(':ee-office:ee-docx4j') {
    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee-slides:ee-slides_json')
        compile project(':ee-office:ee-translate')

        compile "org.docx4j:docx4j:$version_docx4j"
        compile "javax.xml.bind:jaxb-api:$version_jaxb_api"
    }
}

project(':ee-email:ee-email') {
    dependencies {
        compile project(':ee:ee-common')
        compile "javax.mail:javax.mail-api:$version_mail"
    }
}

project(':ee-email:ee-email_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee-email:ee-email_excel') {
    dependencies {
        compile project(':ee-email:ee-email')
        compile project(':ee-office:ee-excel')
    }
}

project(':ee-office:ee-word') {
    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')

        compile "org.apache.poi:poi-ooxml:$version_ooxml"
    }
}

project(':ee-office:ee-translate') {
    dependencies {
        compile project(':ee-office:ee-excel')
        compile "com.google.cloud:google-cloud-translate:$version_google_cloud"
    }
}

project(':ee-office:ee-translate_fx') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee-office:ee-translate')
        compile project(':ee-office:ee-docx4j')
        compile project(':ee:tornadoFxBom')
    }
}

project(':ee-grab:ee-grab') {
    dependencies {
        compile project(':ee:ee-common')
        compile "org.seleniumhq.selenium:selenium-api:$version_selenium"
        compile "org.seleniumhq.selenium:selenium-firefox-driver:$version_selenium"
        compile "org.seleniumhq.selenium:selenium-chrome-driver:$version_selenium"
        compile "org.seleniumhq.selenium:selenium-support:$version_selenium"
        compile "org.apache.httpcomponents:httpclient"
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
    }

}

project(':ee-grab:ee-fiveh') {
    dependencies {
        compile project(':ee-grab:ee-grab')
        compile project(':ee-email:ee-email')
    }
}

project(':ee-grab:ee-rulit') {
    dependencies {
        compile project(':ee-grab:ee-grab')
    }
}

project(':ee-grab:ee-sharepoint') {
    dependencies {
        compile project(':ee-grab:ee-grab')
    }
}


project(':ee-grab:ee-moodle') {
    dependencies {
        compile project(':ee-grab:ee-grab')
    }
}

project(':ee-grab:ee-moodle_fx') {
    apply plugin: 'application'
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    mainClassName = 'ee.moodle.fx.MoodleApp'

    dependencies {
        compile project(':ee-grab:ee-moodle')
        compile project(':ee:tornadoFxBom')
    }

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'ee.moodle.fx.MoodleApp'
            )
        }
        from configurations.compile.collect { entry -> zipTree(entry) }
    }

    task copyDrivers(type: Copy) {
        from "$buildDir/../../ee-grab/drivers"
        into "$buildDir/drivers"
    }

    distributions {
        main {
            contents {
                from(copyDrivers) {
                    into "drivers"
                }
            }
        }
    }
}

project(':ee-grab:ee-unisa') {
    dependencies {
        compile project(':ee-grab:ee-grab')
    }
}

project(':ee-grab:ee-brill') {
    dependencies {
        compile project(':ee-grab:ee-grab')
    }
}

project(':ee-schkola:ee-schkola') {
    dependencies {
        compile project(':ee:ee-common')

        testCompile project(':ee-grab:ee-fiveh')
        testCompile project(':ee-office:ee-msaccess')
        testCompile project(':ee-email:ee-email_excel')
    }
}

project(':ee-schkola:ee-schkola_fx') {
    apply plugin: 'application'
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')
        compile project(':ee-schkola:ee-schkola')
        compile project(':ee:tornadoFxBom')
    }

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'ee.schkola.fx.app.MyApp'
            )
        }
        from configurations.compile.collect { entry -> zipTree(entry) }
    }

    mainClassName = "ee.schkola.fx.app.MyApp"
}

project(':ee-schkola:ee-schkola_des') {

    sourceSets {
        main {
            kotlin.srcDirs = [
                    'src/main/kotlin',
                    'src/external/1', 'src/external/2', 'src/external/3',
                    'src/external/4', 'src/external/5']
        }
    }

    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')
        compile project(':ee:ee-system')

        compile project(':ee:ee-design_swagger')
        compile project(':ee:ee-design_json')
    }
}

project(':ee-schkola:ee-schkola_des_fx') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee-schkola:ee-schkola_des')
        compile project(':ee:ee-lang_fx')
    }
}

project(':ee-schkola:ee-schkola_groovy') {
    apply plugin: "groovy"

    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee-schkola:ee-schkola')
        compile project(':ee-office:ee-msaccess')
        compile 'org.codehaus.groovy:groovy-all:2.4.7'

        testCompile project(':ee:ee-design')
    }
}

project(':rfc1006:rfc1006') {
    dependencies {
    }
}

project(':rfc1006:rfc1006_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':eye:eye') {
    dependencies {
    }
}

project(':eye:eye_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':auth:auth-des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}


project(':cg:cg') {
    dependencies {
        compile project(':ee:ee-common')
    }
}
project(':cg:cg_des') {
    dependencies {
        compile project(':ee:ee-common')
        compile project(':ee:ee-design')
        compile project(':ee:ee-system')
    }
}
project(':cg:cg_fx') {
    apply plugin: 'application'
    mainClassName = 'cg.ee.fx.CgApp'

    dependencies {
        compile project(':ee:ee-lang_fx')
        compile project(':cg:cg_des')
        compile project(':ee:tornadoFxBom')
    }

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'cg.ee.fx.CgApp'
            )
        }
        from configurations.compile.collect { entry -> zipTree(entry) }
    }
}

/*
project(':counter:counter') {
    dependencies {
    }
}

project(':counter:counter-des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}


project(':auth:auth') {
    dependencies {
    }
}

project(':auth:auth-des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}
*/